

server:
  port: 8080

# 断言工厂 org.springframework.cloud.gateway.handler.predicate包路径下的类

# 过滤器种类:
# 1. 路由过滤器 org.springframework.cloud.gateway.filter.factory.StripPrefixGatewayFilterFactory
# 2. 默认过滤器
# 3. 全局过滤器 - 自定义过滤器
# 过滤器排序规则：
# 1. 全局过滤器可以实现Ordered接口并且指定Order值, 值越小顺序越优先
# 2. 当3中类型的过滤器Order值相同时,默认过滤器 > 路由过滤器 > 全局过滤器

spring:
  data:
    redis:
      host: 10.211.55.4
      port: 6379
  application:
    name: gateway-center
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true
      routes:
        - id: order_center_routh
          uri: lb://ORDER-CENTER
          predicates:
            - Path=/order/**
          filters:
            - AddRequestHeader=company,Elliot # 路由过滤器: 增加请求头信息
      default-filters:
        - AddRequestHeader=message,Happy every day
        - name: RequestRateLimiter
          args:
            # 如果keyResolver返回空key，则拒绝该请求403，默认true表示拒绝，false则表示允许访问
            deny-empty-key: false
            # 令牌桶算法每秒补充的token数量（每秒的请求数量）spring-boot-starter-data-redis-reactive
            redis-rate-limiter.replenishRate: 1
            # 令牌桶算法token最大数量（每秒的最大请求数量）
            redis-rate-limiter.burstCapacity: 1
            # 单次请求消费的token数量
            redis-rate-limiter.requestedTokens: 1
            # 自定义的KeyResolver（从请求exchange解析id，用于区分限流的独立单元，如用户ID、remoteAddr、sessionId等）
            key-resolver: "#{@ipKeyResolver}"



eureka:
  client:
    register-with-eureka: true
    fetchRegistry: true
    service-url:
      defaultZone: http://localhost:8761/eureka
  instance:
    instance-id: ${spring.application.name}:${server.port}
    prefer-ip-address: true


